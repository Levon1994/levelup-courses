{"ast":null,"code":"import _defineProperty from \"/Users/levonazizyan/Desktop/LevelUP/Course Levelup/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/levonazizyan/Desktop/LevelUP/Course Levelup/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/levonazizyan/Desktop/LevelUP/Course Levelup/src/utils/translator/index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { createContext, useState, useEffect, useCallback, useContext, useMemo } from 'react';\nimport Fetch from 'utils/fetch';\nconst TranslatorContext = createContext();\n\nconst TranslatorProvider = ({\n  children\n}) => {\n  const _useState = useState({}),\n        _useState2 = _slicedToArray(_useState, 2),\n        translations = _useState2[0],\n        setTranslations = _useState2[1];\n\n  const _useState3 = useState('en'),\n        _useState4 = _slicedToArray(_useState3, 2),\n        language = _useState4[0],\n        setLanguage = _useState4[1];\n\n  const loadTranslations = useCallback(async lang => {\n    const result = await Fetch.get(\"/translations/resources-locale_\".concat(lang, \".json\"));\n    setTranslations(prev => _objectSpread({}, prev, {\n      [lang]: result || {}\n    }));\n  }, []);\n  useEffect(() => {\n    if (!translations[language]) {\n      loadTranslations(language);\n    }\n  }, [language, translations, loadTranslations]);\n  const translate = useCallback(str => {\n    const currentTranslations = translations[language];\n    return currentTranslations && currentTranslations[str] || str;\n  }, [translations, language]);\n  const value = useMemo(() => ({\n    translate,\n    setLanguage\n  }), [translate, setLanguage]);\n  return React.createElement(TranslatorContext.Provider, {\n    value: value,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, children);\n};\n\nconst useTranslator = () => {\n  const _useContext = useContext(TranslatorContext),\n        t = _useContext.translate,\n        setLanguage = _useContext.setLanguage;\n\n  return {\n    t,\n    setLanguage\n  };\n};\n\nexport { TranslatorProvider, useTranslator };","map":{"version":3,"sources":["/Users/levonazizyan/Desktop/LevelUP/Course Levelup/src/utils/translator/index.js"],"names":["React","createContext","useState","useEffect","useCallback","useContext","useMemo","Fetch","TranslatorContext","TranslatorProvider","children","translations","setTranslations","language","setLanguage","loadTranslations","lang","result","get","prev","translate","str","currentTranslations","value","useTranslator","t"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IACEC,aADF,EAEEC,QAFF,EAGEC,SAHF,EAIEC,WAJF,EAKEC,UALF,EAMEC,OANF,QAOO,OAPP;AASA,OAAOC,KAAP,MAAkB,aAAlB;AAEA,MAAMC,iBAAiB,GAAGP,aAAa,EAAvC;;AAEA,MAAMQ,kBAAkB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA,oBAEHR,QAAQ,CAAC,EAAD,CAFL;AAAA;AAAA,QAEpCS,YAFoC;AAAA,QAEtBC,eAFsB;;AAAA,qBAGXV,QAAQ,CAAC,IAAD,CAHG;AAAA;AAAA,QAGpCW,QAHoC;AAAA,QAG1BC,WAH0B;;AAK3C,QAAMC,gBAAgB,GAAGX,WAAW,CAAC,MAAMY,IAAN,IAAc;AACjD,UAAMC,MAAM,GAAG,MAAMV,KAAK,CAACW,GAAN,0CAA4CF,IAA5C,WAArB;AACAJ,IAAAA,eAAe,CAACO,IAAI,sBAAUA,IAAV;AAAgB,OAACH,IAAD,GAAQC,MAAM,IAAI;AAAlC,MAAL,CAAf;AACD,GAHmC,EAGjC,EAHiC,CAApC;AAKAd,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACQ,YAAY,CAACE,QAAD,CAAjB,EAA6B;AAC3BE,MAAAA,gBAAgB,CAACF,QAAD,CAAhB;AACD;AACF,GAJQ,EAIN,CAACA,QAAD,EAAWF,YAAX,EAAyBI,gBAAzB,CAJM,CAAT;AAMA,QAAMK,SAAS,GAAGhB,WAAW,CAACiB,GAAG,IAAI;AACnC,UAAMC,mBAAmB,GAAGX,YAAY,CAACE,QAAD,CAAxC;AACA,WAAQS,mBAAmB,IAAIA,mBAAmB,CAACD,GAAD,CAA3C,IAAqDA,GAA5D;AACD,GAH4B,EAG1B,CAACV,YAAD,EAAeE,QAAf,CAH0B,CAA7B;AAKA,QAAMU,KAAK,GAAGjB,OAAO,CACnB,OAAO;AAAEc,IAAAA,SAAF;AAAaN,IAAAA;AAAb,GAAP,CADmB,EAEnB,CAACM,SAAD,EAAYN,WAAZ,CAFmB,CAArB;AAKA,SACE,oBAAC,iBAAD,CAAmB,QAAnB;AAA4B,IAAA,KAAK,EAAES,KAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGb,QADH,CADF;AAKD,CA/BD;;AAiCA,MAAMc,aAAa,GAAG,MAAM;AAAA,sBACYnB,UAAU,CAACG,iBAAD,CADtB;AAAA,QACPiB,CADO,eAClBL,SADkB;AAAA,QACJN,WADI,eACJA,WADI;;AAE1B,SAAO;AAAEW,IAAAA,CAAF;AAAKX,IAAAA;AAAL,GAAP;AACD,CAHD;;AAKA,SACEL,kBADF,EAEEe,aAFF","sourcesContent":["import React, {\n  createContext,\n  useState,\n  useEffect,\n  useCallback,\n  useContext,\n  useMemo,\n} from 'react';\n\nimport Fetch from 'utils/fetch';\n\nconst TranslatorContext = createContext();\n\nconst TranslatorProvider = ({ children }) => {\n\n  const [translations, setTranslations] = useState({});\n  const [language, setLanguage] = useState('en');\n\n  const loadTranslations = useCallback(async lang => {\n    const result = await Fetch.get(`/translations/resources-locale_${lang}.json`);\n    setTranslations(prev => ({ ...prev, [lang]: result || {} }));\n  }, []);\n\n  useEffect(() => {\n    if (!translations[language]) {\n      loadTranslations(language);\n    }\n  }, [language, translations, loadTranslations]);\n\n  const translate = useCallback(str => {\n    const currentTranslations = translations[language];\n    return (currentTranslations && currentTranslations[str]) || str;\n  }, [translations, language]);\n\n  const value = useMemo(\n    () => ({ translate, setLanguage }),\n    [translate, setLanguage],\n  );\n\n  return (\n    <TranslatorContext.Provider value={value}>\n      {children}\n    </TranslatorContext.Provider>\n  );\n}\n\nconst useTranslator = () => {\n  const { translate: t, setLanguage } = useContext(TranslatorContext);\n  return { t, setLanguage };\n};\n\nexport {\n  TranslatorProvider,\n  useTranslator,\n}\n"]},"metadata":{},"sourceType":"module"}