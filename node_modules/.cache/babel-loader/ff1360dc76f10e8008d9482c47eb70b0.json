{"ast":null,"code":"import _defineProperty from \"/Users/levonazizyan/Desktop/LevelUP/Course Levelup/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { BASE_URL } from 'configs';\nexport default class Fetch {\n  static async fetch(options) {\n    const headers = options.headers,\n          method = options.method,\n          body = options.body,\n          path = options.path,\n          data = options.data;\n    let requestOptions = {\n      headers: _objectSpread({\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      }, headers),\n      method,\n      redirect: 'follow'\n    };\n\n    if (body) {\n      requestOptions.body = JSON.stringify(body);\n    } else if (data) {\n      requestOptions.body = data;\n    } // Fire the Request and Return the response promise Object\n\n\n    const requestPromise = await fetch(new Request(\"\".concat(BASE_URL).concat(path), requestOptions)).then(res => res).then(data => data.ok && data.json());\n    return requestPromise;\n  }\n  /* GET (retrieve) */\n\n\n}\n\nFetch.get = options => Fetch.fetch(_objectSpread({}, options, {\n  method: 'GET'\n}));\n\nFetch.post = options => Fetch.fetch(_objectSpread({}, options, {\n  method: 'POST'\n}));\n\nFetch.put = options => Fetch.fetch(_objectSpread({}, options, {\n  method: 'PUT'\n}));\n\nFetch.delete = options => Fetch.fetch(_objectSpread({}, options, {\n  method: 'DELETE'\n}));","map":{"version":3,"sources":["/Users/levonazizyan/Desktop/LevelUP/Course Levelup/src/helpers/fetch.js"],"names":["BASE_URL","Fetch","fetch","options","headers","method","body","path","data","requestOptions","redirect","JSON","stringify","requestPromise","Request","then","res","ok","json","get","post","put","delete"],"mappings":";;;;;;AAAA,SAASA,QAAT,QAAyB,SAAzB;AAEA,eAAe,MAAMC,KAAN,CAAY;AACvB,eAAaC,KAAb,CAAmBC,OAAnB,EAA4B;AAAA,UAChBC,OADgB,GACsBD,OADtB,CAChBC,OADgB;AAAA,UACPC,MADO,GACsBF,OADtB,CACPE,MADO;AAAA,UACCC,IADD,GACsBH,OADtB,CACCG,IADD;AAAA,UACOC,IADP,GACsBJ,OADtB,CACOI,IADP;AAAA,UACaC,IADb,GACsBL,OADtB,CACaK,IADb;AAGxB,QAAIC,cAAc,GAAG;AACjBL,MAAAA,OAAO;AACH,kBAAU,kBADP;AAEH,wBAAgB;AAFb,SAGAA,OAHA,CADU;AAMjBC,MAAAA,MANiB;AAOjBK,MAAAA,QAAQ,EAAE;AAPO,KAArB;;AAUA,QAAIJ,IAAJ,EAAU;AACNG,MAAAA,cAAc,CAACH,IAAf,GAAsBK,IAAI,CAACC,SAAL,CAAeN,IAAf,CAAtB;AACH,KAFD,MAEO,IAAGE,IAAH,EAAS;AACZC,MAAAA,cAAc,CAACH,IAAf,GAAsBE,IAAtB;AACH,KAjBuB,CAkBxB;;;AACA,UAAMK,cAAc,GAAG,MAAMX,KAAK,CAAC,IAAIY,OAAJ,WAAed,QAAf,SAA0BO,IAA1B,GAAkCE,cAAlC,CAAD,CAAL,CAAyDM,IAAzD,CAA+DC,GAAD,IAAQA,GAAtE,EAA2ED,IAA3E,CAAiFP,IAAD,IAASA,IAAI,CAACS,EAAL,IAAWT,IAAI,CAACU,IAAL,EAApG,CAA7B;AAEA,WAAOL,cAAP;AACH;AAED;;;AAzBuB;;AAANZ,K,CA0BVkB,G,GAAMhB,OAAO,IAAIF,KAAK,CAACC,KAAN,mBAAiBC,OAAjB;AAA0BE,EAAAA,MAAM,EAAE;AAAlC,G;;AA1BPJ,K,CA6BVmB,I,GAAOjB,OAAO,IAAIF,KAAK,CAACC,KAAN,mBAAiBC,OAAjB;AAA0BE,EAAAA,MAAM,EAAE;AAAlC,G;;AA7BRJ,K,CAgCVoB,G,GAAMlB,OAAO,IAAIF,KAAK,CAACC,KAAN,mBAAiBC,OAAjB;AAA0BE,EAAAA,MAAM,EAAE;AAAlC,G;;AAhCPJ,K,CAmCVqB,M,GAASnB,OAAO,IAAIF,KAAK,CAACC,KAAN,mBAAiBC,OAAjB;AAA0BE,EAAAA,MAAM,EAAE;AAAlC,G","sourcesContent":["import { BASE_URL } from 'configs';\n\nexport default class Fetch {\n    static async fetch(options) {\n        const { headers, method, body, path, data } = options;\n\n        let requestOptions = {\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                ...headers,\n            },\n            method,\n            redirect: 'follow',\n        };\n\n        if (body) {\n            requestOptions.body = JSON.stringify(body);\n        } else if(data) {\n            requestOptions.body = data;\n        }\n        // Fire the Request and Return the response promise Object\n        const requestPromise = await fetch(new Request(`${BASE_URL}${path}`, requestOptions)).then((res)=> res).then((data)=> data.ok && data.json());\n\n        return requestPromise;\n    }\n\n    /* GET (retrieve) */\n    static get = options => Fetch.fetch({ ...options, method: 'GET' });\n\n    /* POST (create) */\n    static post = options => Fetch.fetch({ ...options, method: 'POST' });\n\n    /* PUT (update) */\n    static put = options => Fetch.fetch({ ...options, method: 'PUT' });;\n\n    /* DELETE (remove) */\n    static delete = options => Fetch.fetch({ ...options, method: 'DELETE' });\n}\n"]},"metadata":{},"sourceType":"module"}